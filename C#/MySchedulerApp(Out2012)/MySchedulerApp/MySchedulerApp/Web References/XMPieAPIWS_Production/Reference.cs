//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.544
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.544.
// 
#pragma warning disable 1591

namespace ConsoleApplication1.XMPieAPIWS_Production {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Production_SSPSoap", Namespace="XMPieWSAPI")]
    public partial class Production_SSP : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SubmitJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitSplittedJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitJobWithParallelProcessingOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeployHTMLDocumentJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnDeployHTMLDocumentJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback MergeCSVXFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AppendCSVXFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateOnDemandOutputOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOnDemandOutputOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOnDemandOutputOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Production_SSP() {
            this.Url = global::ConsoleApplication1.Properties.Settings.Default.MySchedulerApp_XMPieAPIWS_Production_Production_SSP;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SubmitJobCompletedEventHandler SubmitJobCompleted;
        
        /// <remarks/>
        public event SubmitSplittedJobCompletedEventHandler SubmitSplittedJobCompleted;
        
        /// <remarks/>
        public event SubmitJobWithParallelProcessingCompletedEventHandler SubmitJobWithParallelProcessingCompleted;
        
        /// <remarks/>
        public event DeployHTMLDocumentJobCompletedEventHandler DeployHTMLDocumentJobCompleted;
        
        /// <remarks/>
        public event UnDeployHTMLDocumentJobCompletedEventHandler UnDeployHTMLDocumentJobCompleted;
        
        /// <remarks/>
        public event MergeCSVXFilesCompletedEventHandler MergeCSVXFilesCompleted;
        
        /// <remarks/>
        public event AppendCSVXFileCompletedEventHandler AppendCSVXFileCompleted;
        
        /// <remarks/>
        public event CreateOnDemandOutputCompletedEventHandler CreateOnDemandOutputCompleted;
        
        /// <remarks/>
        public event GetOnDemandOutputCompletedEventHandler GetOnDemandOutputCompleted;
        
        /// <remarks/>
        public event DeleteOnDemandOutputCompletedEventHandler DeleteOnDemandOutputCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SubmitJob", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SubmitJob(string inUsername, string inPassword, string inJobTicket, string inPriority, string inTouchPointID) {
            object[] results = this.Invoke("SubmitJob", new object[] {
                        inUsername,
                        inPassword,
                        inJobTicket,
                        inPriority,
                        inTouchPointID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitJobAsync(string inUsername, string inPassword, string inJobTicket, string inPriority, string inTouchPointID) {
            this.SubmitJobAsync(inUsername, inPassword, inJobTicket, inPriority, inTouchPointID, null);
        }
        
        /// <remarks/>
        public void SubmitJobAsync(string inUsername, string inPassword, string inJobTicket, string inPriority, string inTouchPointID, object userState) {
            if ((this.SubmitJobOperationCompleted == null)) {
                this.SubmitJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitJobOperationCompleted);
            }
            this.InvokeAsync("SubmitJob", new object[] {
                        inUsername,
                        inPassword,
                        inJobTicket,
                        inPriority,
                        inTouchPointID}, this.SubmitJobOperationCompleted, userState);
        }
        
        private void OnSubmitJobOperationCompleted(object arg) {
            if ((this.SubmitJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitJobCompleted(this, new SubmitJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SubmitSplittedJob", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] SubmitSplittedJob(string inUsername, string inPassword, string inJobTicket, string inSplittingType, string inSplittingInfo, string inPriority, string inTouchPointID) {
            object[] results = this.Invoke("SubmitSplittedJob", new object[] {
                        inUsername,
                        inPassword,
                        inJobTicket,
                        inSplittingType,
                        inSplittingInfo,
                        inPriority,
                        inTouchPointID});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void SubmitSplittedJobAsync(string inUsername, string inPassword, string inJobTicket, string inSplittingType, string inSplittingInfo, string inPriority, string inTouchPointID) {
            this.SubmitSplittedJobAsync(inUsername, inPassword, inJobTicket, inSplittingType, inSplittingInfo, inPriority, inTouchPointID, null);
        }
        
        /// <remarks/>
        public void SubmitSplittedJobAsync(string inUsername, string inPassword, string inJobTicket, string inSplittingType, string inSplittingInfo, string inPriority, string inTouchPointID, object userState) {
            if ((this.SubmitSplittedJobOperationCompleted == null)) {
                this.SubmitSplittedJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitSplittedJobOperationCompleted);
            }
            this.InvokeAsync("SubmitSplittedJob", new object[] {
                        inUsername,
                        inPassword,
                        inJobTicket,
                        inSplittingType,
                        inSplittingInfo,
                        inPriority,
                        inTouchPointID}, this.SubmitSplittedJobOperationCompleted, userState);
        }
        
        private void OnSubmitSplittedJobOperationCompleted(object arg) {
            if ((this.SubmitSplittedJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitSplittedJobCompleted(this, new SubmitSplittedJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SubmitJobWithParallelProcessing", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SubmitJobWithParallelProcessing(string inUsername, string inPassword, string inJobTicket, string inSplittingType, string inSplittingInfo, string inPriority, string inTouchPointID) {
            object[] results = this.Invoke("SubmitJobWithParallelProcessing", new object[] {
                        inUsername,
                        inPassword,
                        inJobTicket,
                        inSplittingType,
                        inSplittingInfo,
                        inPriority,
                        inTouchPointID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitJobWithParallelProcessingAsync(string inUsername, string inPassword, string inJobTicket, string inSplittingType, string inSplittingInfo, string inPriority, string inTouchPointID) {
            this.SubmitJobWithParallelProcessingAsync(inUsername, inPassword, inJobTicket, inSplittingType, inSplittingInfo, inPriority, inTouchPointID, null);
        }
        
        /// <remarks/>
        public void SubmitJobWithParallelProcessingAsync(string inUsername, string inPassword, string inJobTicket, string inSplittingType, string inSplittingInfo, string inPriority, string inTouchPointID, object userState) {
            if ((this.SubmitJobWithParallelProcessingOperationCompleted == null)) {
                this.SubmitJobWithParallelProcessingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitJobWithParallelProcessingOperationCompleted);
            }
            this.InvokeAsync("SubmitJobWithParallelProcessing", new object[] {
                        inUsername,
                        inPassword,
                        inJobTicket,
                        inSplittingType,
                        inSplittingInfo,
                        inPriority,
                        inTouchPointID}, this.SubmitJobWithParallelProcessingOperationCompleted, userState);
        }
        
        private void OnSubmitJobWithParallelProcessingOperationCompleted(object arg) {
            if ((this.SubmitJobWithParallelProcessingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitJobWithParallelProcessingCompleted(this, new SubmitJobWithParallelProcessingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/DeployHTMLDocumentJob", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeployHTMLDocumentJob(string inUsername, string inPassword, string inJobTicket, string inTouchPointID) {
            object[] results = this.Invoke("DeployHTMLDocumentJob", new object[] {
                        inUsername,
                        inPassword,
                        inJobTicket,
                        inTouchPointID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeployHTMLDocumentJobAsync(string inUsername, string inPassword, string inJobTicket, string inTouchPointID) {
            this.DeployHTMLDocumentJobAsync(inUsername, inPassword, inJobTicket, inTouchPointID, null);
        }
        
        /// <remarks/>
        public void DeployHTMLDocumentJobAsync(string inUsername, string inPassword, string inJobTicket, string inTouchPointID, object userState) {
            if ((this.DeployHTMLDocumentJobOperationCompleted == null)) {
                this.DeployHTMLDocumentJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeployHTMLDocumentJobOperationCompleted);
            }
            this.InvokeAsync("DeployHTMLDocumentJob", new object[] {
                        inUsername,
                        inPassword,
                        inJobTicket,
                        inTouchPointID}, this.DeployHTMLDocumentJobOperationCompleted, userState);
        }
        
        private void OnDeployHTMLDocumentJobOperationCompleted(object arg) {
            if ((this.DeployHTMLDocumentJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeployHTMLDocumentJobCompleted(this, new DeployHTMLDocumentJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/UnDeployHTMLDocumentJob", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnDeployHTMLDocumentJob(string inUsername, string inPassword, string inJobID) {
            object[] results = this.Invoke("UnDeployHTMLDocumentJob", new object[] {
                        inUsername,
                        inPassword,
                        inJobID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UnDeployHTMLDocumentJobAsync(string inUsername, string inPassword, string inJobID) {
            this.UnDeployHTMLDocumentJobAsync(inUsername, inPassword, inJobID, null);
        }
        
        /// <remarks/>
        public void UnDeployHTMLDocumentJobAsync(string inUsername, string inPassword, string inJobID, object userState) {
            if ((this.UnDeployHTMLDocumentJobOperationCompleted == null)) {
                this.UnDeployHTMLDocumentJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnDeployHTMLDocumentJobOperationCompleted);
            }
            this.InvokeAsync("UnDeployHTMLDocumentJob", new object[] {
                        inUsername,
                        inPassword,
                        inJobID}, this.UnDeployHTMLDocumentJobOperationCompleted, userState);
        }
        
        private void OnUnDeployHTMLDocumentJobOperationCompleted(object arg) {
            if ((this.UnDeployHTMLDocumentJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnDeployHTMLDocumentJobCompleted(this, new UnDeployHTMLDocumentJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/MergeCSVXFiles", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MergeCSVXFiles(string inUsername, string inPassword, string[] inCSVXFilePaths, string inOutputCSVXPath) {
            object[] results = this.Invoke("MergeCSVXFiles", new object[] {
                        inUsername,
                        inPassword,
                        inCSVXFilePaths,
                        inOutputCSVXPath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MergeCSVXFilesAsync(string inUsername, string inPassword, string[] inCSVXFilePaths, string inOutputCSVXPath) {
            this.MergeCSVXFilesAsync(inUsername, inPassword, inCSVXFilePaths, inOutputCSVXPath, null);
        }
        
        /// <remarks/>
        public void MergeCSVXFilesAsync(string inUsername, string inPassword, string[] inCSVXFilePaths, string inOutputCSVXPath, object userState) {
            if ((this.MergeCSVXFilesOperationCompleted == null)) {
                this.MergeCSVXFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMergeCSVXFilesOperationCompleted);
            }
            this.InvokeAsync("MergeCSVXFiles", new object[] {
                        inUsername,
                        inPassword,
                        inCSVXFilePaths,
                        inOutputCSVXPath}, this.MergeCSVXFilesOperationCompleted, userState);
        }
        
        private void OnMergeCSVXFilesOperationCompleted(object arg) {
            if ((this.MergeCSVXFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MergeCSVXFilesCompleted(this, new MergeCSVXFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/AppendCSVXFile", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AppendCSVXFile(string inUsername, string inPassword, string inMainCSVXFilePath, string inSecondaryCSVXFilePath) {
            object[] results = this.Invoke("AppendCSVXFile", new object[] {
                        inUsername,
                        inPassword,
                        inMainCSVXFilePath,
                        inSecondaryCSVXFilePath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AppendCSVXFileAsync(string inUsername, string inPassword, string inMainCSVXFilePath, string inSecondaryCSVXFilePath) {
            this.AppendCSVXFileAsync(inUsername, inPassword, inMainCSVXFilePath, inSecondaryCSVXFilePath, null);
        }
        
        /// <remarks/>
        public void AppendCSVXFileAsync(string inUsername, string inPassword, string inMainCSVXFilePath, string inSecondaryCSVXFilePath, object userState) {
            if ((this.AppendCSVXFileOperationCompleted == null)) {
                this.AppendCSVXFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAppendCSVXFileOperationCompleted);
            }
            this.InvokeAsync("AppendCSVXFile", new object[] {
                        inUsername,
                        inPassword,
                        inMainCSVXFilePath,
                        inSecondaryCSVXFilePath}, this.AppendCSVXFileOperationCompleted, userState);
        }
        
        private void OnAppendCSVXFileOperationCompleted(object arg) {
            if ((this.AppendCSVXFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AppendCSVXFileCompleted(this, new AppendCSVXFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/CreateOnDemandOutput", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateOnDemandOutput(string inUsername, string inPassword, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] Property[] inProps) {
            object[] results = this.Invoke("CreateOnDemandOutput", new object[] {
                        inUsername,
                        inPassword,
                        inProps});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateOnDemandOutputAsync(string inUsername, string inPassword, Property[] inProps) {
            this.CreateOnDemandOutputAsync(inUsername, inPassword, inProps, null);
        }
        
        /// <remarks/>
        public void CreateOnDemandOutputAsync(string inUsername, string inPassword, Property[] inProps, object userState) {
            if ((this.CreateOnDemandOutputOperationCompleted == null)) {
                this.CreateOnDemandOutputOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOnDemandOutputOperationCompleted);
            }
            this.InvokeAsync("CreateOnDemandOutput", new object[] {
                        inUsername,
                        inPassword,
                        inProps}, this.CreateOnDemandOutputOperationCompleted, userState);
        }
        
        private void OnCreateOnDemandOutputOperationCompleted(object arg) {
            if ((this.CreateOnDemandOutputCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateOnDemandOutputCompleted(this, new CreateOnDemandOutputCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetOnDemandOutput", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public OnDemandOutputResult GetOnDemandOutput(string inUsername, string inPassword, string inRequestID) {
            object[] results = this.Invoke("GetOnDemandOutput", new object[] {
                        inUsername,
                        inPassword,
                        inRequestID});
            return ((OnDemandOutputResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetOnDemandOutputAsync(string inUsername, string inPassword, string inRequestID) {
            this.GetOnDemandOutputAsync(inUsername, inPassword, inRequestID, null);
        }
        
        /// <remarks/>
        public void GetOnDemandOutputAsync(string inUsername, string inPassword, string inRequestID, object userState) {
            if ((this.GetOnDemandOutputOperationCompleted == null)) {
                this.GetOnDemandOutputOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOnDemandOutputOperationCompleted);
            }
            this.InvokeAsync("GetOnDemandOutput", new object[] {
                        inUsername,
                        inPassword,
                        inRequestID}, this.GetOnDemandOutputOperationCompleted, userState);
        }
        
        private void OnGetOnDemandOutputOperationCompleted(object arg) {
            if ((this.GetOnDemandOutputCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOnDemandOutputCompleted(this, new GetOnDemandOutputCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/DeleteOnDemandOutput", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteOnDemandOutput(string inUsername, string inPassword, string inRequestID) {
            object[] results = this.Invoke("DeleteOnDemandOutput", new object[] {
                        inUsername,
                        inPassword,
                        inRequestID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteOnDemandOutputAsync(string inUsername, string inPassword, string inRequestID) {
            this.DeleteOnDemandOutputAsync(inUsername, inPassword, inRequestID, null);
        }
        
        /// <remarks/>
        public void DeleteOnDemandOutputAsync(string inUsername, string inPassword, string inRequestID, object userState) {
            if ((this.DeleteOnDemandOutputOperationCompleted == null)) {
                this.DeleteOnDemandOutputOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOnDemandOutputOperationCompleted);
            }
            this.InvokeAsync("DeleteOnDemandOutput", new object[] {
                        inUsername,
                        inPassword,
                        inRequestID}, this.DeleteOnDemandOutputOperationCompleted, userState);
        }
        
        private void OnDeleteOnDemandOutputOperationCompleted(object arg) {
            if ((this.DeleteOnDemandOutputCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteOnDemandOutputCompleted(this, new DeleteOnDemandOutputCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }

        internal string SubmitJob(string uName, string Password, string jobTicketID, int p, string p_2)
        {
            throw new NotImplementedException();
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.450")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class Property {
        
        private string m_NameField;
        
        private string m_ValueField;
        
        /// <remarks/>
        public string m_Name {
            get {
                return this.m_NameField;
            }
            set {
                this.m_NameField = value;
            }
        }
        
        /// <remarks/>
        public string m_Value {
            get {
                return this.m_ValueField;
            }
            set {
                this.m_ValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.450")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class OnDemandOutputResult {
        
        private int m_StatusField;
        
        private string m_MessageField;
        
        private string m_FileNameField;
        
        private int m_FileSizeField;
        
        private string m_FileTokenField;
        
        /// <remarks/>
        public int m_Status {
            get {
                return this.m_StatusField;
            }
            set {
                this.m_StatusField = value;
            }
        }
        
        /// <remarks/>
        public string m_Message {
            get {
                return this.m_MessageField;
            }
            set {
                this.m_MessageField = value;
            }
        }
        
        /// <remarks/>
        public string m_FileName {
            get {
                return this.m_FileNameField;
            }
            set {
                this.m_FileNameField = value;
            }
        }
        
        /// <remarks/>
        public int m_FileSize {
            get {
                return this.m_FileSizeField;
            }
            set {
                this.m_FileSizeField = value;
            }
        }
        
        /// <remarks/>
        public string m_FileToken {
            get {
                return this.m_FileTokenField;
            }
            set {
                this.m_FileTokenField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SubmitJobCompletedEventHandler(object sender, SubmitJobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SubmitSplittedJobCompletedEventHandler(object sender, SubmitSplittedJobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitSplittedJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitSplittedJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SubmitJobWithParallelProcessingCompletedEventHandler(object sender, SubmitJobWithParallelProcessingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitJobWithParallelProcessingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitJobWithParallelProcessingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeployHTMLDocumentJobCompletedEventHandler(object sender, DeployHTMLDocumentJobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeployHTMLDocumentJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeployHTMLDocumentJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UnDeployHTMLDocumentJobCompletedEventHandler(object sender, UnDeployHTMLDocumentJobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnDeployHTMLDocumentJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnDeployHTMLDocumentJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void MergeCSVXFilesCompletedEventHandler(object sender, MergeCSVXFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MergeCSVXFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MergeCSVXFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AppendCSVXFileCompletedEventHandler(object sender, AppendCSVXFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AppendCSVXFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AppendCSVXFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateOnDemandOutputCompletedEventHandler(object sender, CreateOnDemandOutputCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateOnDemandOutputCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateOnDemandOutputCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetOnDemandOutputCompletedEventHandler(object sender, GetOnDemandOutputCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOnDemandOutputCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOnDemandOutputCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OnDemandOutputResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OnDemandOutputResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteOnDemandOutputCompletedEventHandler(object sender, DeleteOnDemandOutputCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteOnDemandOutputCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteOnDemandOutputCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591